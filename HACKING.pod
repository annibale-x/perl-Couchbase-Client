=head1 Hacking Couchbase::Client

This document is to provide a lower-level overview for the internals
of Couchbase::Client

Couchbase::Client (hereafter referred to as 'the module' or 'the distribution')
is bundled with the necessary dependencies - this means C<libcouchbase>,
C<libvbucket>, and optionally C<libevent>.

The installation script will auto-detect whether your system has a suitable version
of those dependencies installed, and if not, install the bundled version in a
location private to the distribution.

Additionally, proper testing requires Java to be installed.

=head2 Manual installation

The following components are required for a proper C<Couchbase::Client>

=over

=item libcouchbase >= 2.0.0 (L<release|http://www.couchbase.com/develop/c/current>)

=item libevent >= 1.4

=item Java (for the tests).

=back

All of the above components (except Java) are bundled in source form with the
tarball distribution (see further).

=head3 Building Couchbase::Client

Couchbase::Client is bundled (in its tarball distribution) with source distributions
of libevent, libisasl, libvbucket, and libcouchbase. These are not present on
the git version because it is assumed that the user may want to provide copies
of their own.

The bundled configuration will only substitute I<missing> dependencies from
the bundle.

C<Couchbase::Client> can be configured to either link against the bundled
libraries, or to link against a custom or system directory.

=head3 Using Embedded Libraries:

In order to use embedded libraries, you should ensure that you have a proper
distribution for each needed and unfound library.

The file C<PLCB_Config.pm> should contain a bunch of hash entries in the format
of 

    LIBFOO_RELEASE => 1.2.3-sdff
    
where C<LIBFOO> is the uper-case name of the library, and the value is the
version of the library.

The tarball B<must> be named C<libfoo-1.2.3-sdff.tar.gz>, and its top-level
directory must be C<libfoo-1.2.3/>

You will find that the config file has sane defaults, and that the main task
is downloading them.

The tarballs should then be relocated to the C<src/> directory.

Once all is ready, you can invoke the C<Makefile.PL> script, optionally
passing some arguments.

=head4 Makefile.PL arguments

=over

=item --libpath

A string for passing to the linker which should contain something like
C<-L/foo -L/bar> etc.

This is only necessary if your standard dependencies are found outside the linker's
default search path (e.g. macports)

=item --incpath

This is the same as C<--libpath>, but are passed to the preprocessor and would
look like C<-I/usr/foo/include> etc.

=back

Thus you can invoke somehting like:

    $ perl Makefile.PL --incpath=-I/opt/local/include --libpath=-L/opt/local/lib
    $ make
    $ make test # but see the testing section, later
    $ make install
    
=head3 Providing your own libraries.

This is a relatively straight-forward option, and is what I use for development.

Simply make use of the aforementioned C<--libpath> and C<--incpath> arguments to
point to the directory which contains the necessary dependencies, and follow
the relevant parts from the above section.


There are some top-level scripts. Some have meaning to only the author, some might
be useful.

If you would like to generate the perl MANIFEST, run the C<gen_manifest.pl>
script.

Also, check out the runnable modules in the C<t/> directory

=head2 Testing

The tests in this module require java to run. Some tests furthermore will only
work on a real cluster, due to some of the limitations in the Java client.

A C<CouchbaseMock.jar> should be located within the C<t/tmp> directory. You can
obtain one from L<here|http://files.couchbase.com/maven2/org/couchbase/mock/CouchbaseMock/0.5-SNAPSHOT/CouchbaseMock-0.5-20120202.071818-12.jar>

To run the tests on a real cluster, you can make use of the
C<PLCB_TEST_REAL_SERVER> environment variable.

When set, it should/can contain something like this:

    PLCB_TEST_REAL_SERVER='bucket=my_bucket,username=secret,memd_port=11212'
    
The keys available are

=over

=item username, password

Authentication information

=item bucket

Which bucket to use (default is C<default>)

=item server

Which server to connect to (default is C<localhost:8091>)

=item memd_port

Required for some tests. This is the authless port for memcached client access.

=back

=head3 KNOWN ISSUES

=over

=item *

32 Bit perls will have arithmetic results stringified if their value is greater
than 32 bits.

=item *

Asynchronous tests (and the reference POE implementation) will not work properly
on NetBSD due to a weird L<kernel bug|http://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=46077>


=item *

I have not even bothered to figure out how to compile this on Windows. Mingw32
will be supported eventually, but probably not MSVC.

=back

=head2 Source Code structure

Most of the core source code is written in either pure C or XS. The perl code
in this distribution is often glue.

See the C<MANIFEST> file for a division of the files, and what they are intended
for. To get an idea of the core interface, see C<xs/perl-couchbase.h>